/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ERC20, ERC20Interface } from "../ERC20";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611370806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461016857806370a082311461019857806395d89b41146101c8578063a457c2d7146101e6578063a9059cbb14610216578063dd62ed3e14610246576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a578063313ce5671461014a575b600080fd5b6100b6610276565b6040516100c39190610e68565b60405180910390f35b6100e660048036038101906100e19190610cf8565b610308565b6040516100f39190610e4d565b60405180910390f35b61010461031f565b6040516101119190610f2a565b60405180910390f35b610134600480360381019061012f9190610ca5565b610329565b6040516101419190610e4d565b60405180910390f35b6101526103f4565b60405161015f9190610f45565b60405180910390f35b610182600480360381019061017d9190610cf8565b61040b565b60405161018f9190610e4d565b60405180910390f35b6101b260048036038101906101ad9190610c38565b6104b0565b6040516101bf9190610f2a565b60405180910390f35b6101d06104f8565b6040516101dd9190610e68565b60405180910390f35b61020060048036038101906101fb9190610cf8565b61058a565b60405161020d9190610e4d565b60405180910390f35b610230600480360381019061022b9190610cf8565b610649565b60405161023d9190610e4d565b60405180910390f35b610260600480360381019061025b9190610c65565b610660565b60405161026d9190610f2a565b60405180910390f35b6060600380546102859061108e565b80601f01602080910402602001604051908101604052809291908181526020018280546102b19061108e565b80156102fe5780601f106102d3576101008083540402835291602001916102fe565b820191906000526020600020905b8154815290600101906020018083116102e157829003601f168201915b5050505050905090565b60006103153384846106e7565b6001905092915050565b6000600254905090565b60006103368484846108b2565b6103e984336103e4856040518060600160405280602881526020016112ee60289139600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b479092919063ffffffff16565b6106e7565b600190509392505050565b6000600560009054906101000a900460ff16905090565b60006104a633846104a185600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bab90919063ffffffff16565b6106e7565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546105079061108e565b80601f01602080910402602001604051908101604052809291908181526020018280546105339061108e565b80156105805780601f1061055557610100808354040283529160200191610580565b820191906000526020600020905b81548152906001019060200180831161056357829003601f168201915b5050505050905090565b600061063f338461063a8560405180606001604052806025815260200161131660259139600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b479092919063ffffffff16565b6106e7565b6001905092915050565b60006106563384846108b2565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610757576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074e90610f0a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156107c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107be90610eaa565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516108a59190610f2a565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610922576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091990610eea565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610992576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098990610e8a565b60405180910390fd5b61099d838383610c09565b610a08816040518060600160405280602681526020016112c8602691396000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b479092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a9b816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bab90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610b3a9190610f2a565b60405180910390a3505050565b6000838311158290610b8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b869190610e68565b60405180910390fd5b5060008385610b9e9190610fd2565b9050809150509392505050565b6000808284610bba9190610f7c565b905083811015610bff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf690610eca565b60405180910390fd5b8091505092915050565b505050565b600081359050610c1d81611299565b92915050565b600081359050610c32816112b0565b92915050565b600060208284031215610c4e57610c4d61111e565b5b6000610c5c84828501610c0e565b91505092915050565b60008060408385031215610c7c57610c7b61111e565b5b6000610c8a85828601610c0e565b9250506020610c9b85828601610c0e565b9150509250929050565b600080600060608486031215610cbe57610cbd61111e565b5b6000610ccc86828701610c0e565b9350506020610cdd86828701610c0e565b9250506040610cee86828701610c23565b9150509250925092565b60008060408385031215610d0f57610d0e61111e565b5b6000610d1d85828601610c0e565b9250506020610d2e85828601610c23565b9150509250929050565b610d4181611018565b82525050565b6000610d5282610f60565b610d5c8185610f6b565b9350610d6c81856020860161105b565b610d7581611123565b840191505092915050565b6000610d8d602383610f6b565b9150610d9882611134565b604082019050919050565b6000610db0602283610f6b565b9150610dbb82611183565b604082019050919050565b6000610dd3601b83610f6b565b9150610dde826111d2565b602082019050919050565b6000610df6602583610f6b565b9150610e01826111fb565b604082019050919050565b6000610e19602483610f6b565b9150610e248261124a565b604082019050919050565b610e3881611044565b82525050565b610e478161104e565b82525050565b6000602082019050610e626000830184610d38565b92915050565b60006020820190508181036000830152610e828184610d47565b905092915050565b60006020820190508181036000830152610ea381610d80565b9050919050565b60006020820190508181036000830152610ec381610da3565b9050919050565b60006020820190508181036000830152610ee381610dc6565b9050919050565b60006020820190508181036000830152610f0381610de9565b9050919050565b60006020820190508181036000830152610f2381610e0c565b9050919050565b6000602082019050610f3f6000830184610e2f565b92915050565b6000602082019050610f5a6000830184610e3e565b92915050565b600081519050919050565b600082825260208201905092915050565b6000610f8782611044565b9150610f9283611044565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610fc757610fc66110c0565b5b828201905092915050565b6000610fdd82611044565b9150610fe883611044565b925082821015610ffb57610ffa6110c0565b5b828203905092915050565b600061101182611024565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b8381101561107957808201518184015260208101905061105e565b83811115611088576000848401525b50505050565b600060028204905060018216806110a657607f821691505b602082108114156110ba576110b96110ef565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000600082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6112a281611006565b81146112ad57600080fd5b50565b6112b981611044565b81146112c457600080fd5b5056fe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212206c339997358a8b4d89a2f6f2c5cff5ece4393403f021a0381b8fd6d2d15dfa8f64736f6c63430008070033";

export class ERC20__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC20> {
    return super.deploy(overrides || {}) as Promise<ERC20>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ERC20 {
    return super.attach(address) as ERC20;
  }
  connect(signer: Signer): ERC20__factory {
    return super.connect(signer) as ERC20__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20Interface {
    return new utils.Interface(_abi) as ERC20Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): ERC20 {
    return new Contract(address, _abi, signerOrProvider) as ERC20;
  }
}
